from collections import namedtuple
from typing import List, Union

from camel_tools.disambig.common import ScoredAnalysis

from wilddiac_utils import normalize_diac, normalize_consonants
from wilddiac_utils import word_to_word_opcount, remove_contextual_diac_flags


__all__ = (
    'CTPPRerankedAnalysis',
    'ctpp_rerank',
)


ScoringTuple = tuple[Union[float, int, str], ...]


class CTPPRerankedAnalysis(namedtuple('CTPPRerankedAnalysis',
                                [
                                    'score',
                                    'analysis',
                                    'diac',
                                    'pos_lex_logprob',
                                    'lex_logprob',
                                    'opcount_sub',
                                    'opcount_del',
                                    'opcount_ins',
                                ])):

    @staticmethod
    def scoring_fn(analysis: 'CTPPRerankedAnalysis') -> ScoringTuple:
        return (analysis.opcount_sub + analysis.opcount_del,
                -analysis.score,
                analysis.opcount_sub,
                analysis.opcount_del,
                -analysis.pos_lex_logprob,
                -analysis.lex_logprob,
                analysis.opcount_ins,
                analysis.diac)

    def __eq__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup == other_tup

    def __ne__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup != other_tup

    def __lt__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup < other_tup

    def __le__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup <= other_tup

    def __gt__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup > other_tup

    def __ge__(self, other: 'CTPPRerankedAnalysis') -> bool:
        self_tup = CTPPRerankedAnalysis.scoring_fn(self)
        other_tup = CTPPRerankedAnalysis.scoring_fn(other)

        return self_tup >= other_tup


def _normalize(word: str) -> str:
    return normalize_consonants(normalize_diac(word))


def ctpp_rerank(word_orig: str, analyses: List[ScoredAnalysis]) -> List[CTPPRerankedAnalysis]:
    """Rerank analyses using the CT++ ranking algorithm.
    """

    orig_norm = _normalize(word_orig)
    reranked = []

    for analysis in analyses:
        analysis_diac = remove_contextual_diac_flags(analysis.diac)
        analysis_diac_norm = _normalize(analysis_diac)
        opcount = word_to_word_opcount(orig_norm, analysis_diac_norm)

        reranked.append(CTPPRerankedAnalysis(analysis.score,
                                         analysis.analysis,
                                         analysis.diac,
                                         analysis.pos_lex_logprob,
                                         analysis.lex_logprob,
                                         opcount.substitute,
                                         opcount.delete,
                                         opcount.insert))

    reranked.sort()

    return reranked
