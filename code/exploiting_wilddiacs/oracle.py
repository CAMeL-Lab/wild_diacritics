from collections import namedtuple
from typing import List, Union

from camel_tools.disambig.common import ScoredAnalysis

from wilddiac_utils import normalize_diac, word_to_word_opcount
from wilddiac_utils import fix_contextual_diacs, remove_contextual_diac_flags


__all__ = (
    'OracleRerankedAnalysis',
    'oracle_rerank_noctx',
    'oracle_rerank_ctx',
)


ScoringTuple = tuple[Union[float, int, str], ...]


class OracleRerankedAnalysis(namedtuple('OracleRerankedAnalysis',
                                [
                                    'score',
                                    'analysis',
                                    'diac',
                                    'pos_lex_logprob',
                                    'lex_logprob',
                                    'opcount_sub',
                                    'opcount_del',
                                    'opcount_ins',
                                ])):

    @staticmethod
    def scoring_fn(analysis: 'OracleRerankedAnalysis') -> ScoringTuple:
        return (analysis.opcount_sub + analysis.opcount_del,
                analysis.opcount_sub,
                analysis.opcount_del,
                analysis.opcount_ins,
                -analysis.score,
                -analysis.pos_lex_logprob,
                -analysis.lex_logprob,
                analysis.diac)

    def __eq__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup == other_tup

    def __ne__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup != other_tup

    def __lt__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup < other_tup

    def __le__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup <= other_tup

    def __gt__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup > other_tup

    def __ge__(self, other: 'OracleRerankedAnalysis') -> bool:
        self_tup = OracleRerankedAnalysis.scoring_fn(self)
        other_tup = OracleRerankedAnalysis.scoring_fn(other)

        return self_tup >= other_tup


def oracle_rerank_noctx(word_full: str,
                        analyses:List[ScoredAnalysis]) -> List[OracleRerankedAnalysis]:
    """Rerank analyses using the oracle ranking algorithm without using
    contextual fixes.
    """

    full_norm = normalize_diac(word_full)
    reranked = []

    for analysis in analyses:
        analysis_diac_norm = normalize_diac(analysis.diac)
        opcount = word_to_word_opcount(full_norm, analysis_diac_norm)

        reranked.append(OracleRerankedAnalysis(analysis.score,
                                               analysis.analysis,
                                               analysis.diac,
                                               analysis.pos_lex_logprob,
                                               analysis.lex_logprob,
                                               opcount.substitute,
                                               opcount.delete,
                                               opcount.insert))

    reranked.sort()

    return reranked


def oracle_rerank_ctx(word_full: str,
                      sentence: List[str],
                      word_index: int,
                      analyses: List[ScoredAnalysis]) -> List[OracleRerankedAnalysis]:
    """Rerank analyses using the oracle ranking algorithm while also using
    contextual fixes.
    """

    full_norm = normalize_diac(word_full)
    reranked = []

    for analysis in analyses:
        sent_oracle = sentence[:]
        sent_oracle[word_index] = analysis.diac
        sent_oracle = fix_contextual_diacs(sent_oracle)
        analysis_diac = remove_contextual_diac_flags(sent_oracle[word_index])
        analysis_diac_norm = normalize_diac(analysis_diac)
        opcount = word_to_word_opcount(full_norm, analysis_diac_norm)

        reranked.append(OracleRerankedAnalysis(analysis.score,
                                               analysis.analysis,
                                               analysis_diac,
                                               analysis.pos_lex_logprob,
                                               analysis.lex_logprob,
                                               opcount.substitute,
                                               opcount.delete,
                                               opcount.insert))

    reranked.sort()

    return reranked
